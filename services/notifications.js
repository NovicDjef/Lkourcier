// services/notifications.js
import Constants from 'expo-constants';
import * as Device from 'expo-device'; // ‚úÖ Utilisez * as Device
import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';

export const configureNotifications = async () => {
  try {
    console.log('üîî Configuration des notifications...');
    
    // Configuration des notifications
    Notifications.setNotificationHandler({
      handleNotification: async () => ({
        shouldShowAlert: true,
        shouldPlaySound: true,
        shouldSetBadge: false,
      }),
    });

    // ‚úÖ V√©rification de s√©curit√© pour Device
    const isPhysicalDevice = Device?.isDevice ?? false;
    
    console.log('üì± Device info:', {
      isDevice: isPhysicalDevice,
      platform: Platform.OS,
      hasConstants: !!Constants.expoConfig
    });

    let token = null;
    
    if (isPhysicalDevice) {
      console.log('üì± Appareil physique d√©tect√©, demande des permissions...');
      
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;
      
      if (existingStatus !== 'granted') {
        console.log('üîê Demande de nouvelles permissions...');
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }
      
      if (finalStatus !== 'granted') {
        console.warn('‚ùå Permissions de notification refus√©es');
        throw new Error('Permissions de notification refus√©es');
      }

      console.log('‚úÖ Permissions accord√©es, g√©n√©ration du token...');
      
      try {
        // ‚úÖ V√©rification du projectId avec fallback
        const projectId = Constants.expoConfig?.extra?.eas?.projectId 
                         || Constants.manifest?.extra?.eas?.projectId
                         || Constants.manifest2?.extra?.eas?.projectId;
        
        console.log('üÜî Project ID:', projectId);
        
        if (projectId) {
          token = (await Notifications.getExpoPushTokenAsync({ projectId })).data;
          console.log('üéØ Token g√©n√©r√©:', token.substring(0, 20) + '...');
        } else {
          console.warn('‚ö†Ô∏è Project ID manquant, token non g√©n√©r√©');
        }
      } catch (tokenError) {
        console.warn('‚ö†Ô∏è Erreur g√©n√©ration token:', tokenError.message);
        // Ne pas throw, continuer sans token
      }
    } else {
      console.log('üñ•Ô∏è √âmulateur d√©tect√©, notifications limit√©es');
    }

    // Configuration Android
    if (Platform.OS === 'android') {
      console.log('ü§ñ Configuration Android...');
      await Notifications.setNotificationChannelAsync('commandes', {
        name: 'Nouvelles commandes',
        importance: Notifications.AndroidImportance.MAX,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: '#4CAF50',
      });
      console.log('‚úÖ Canal Android configur√©');
    }

    console.log('‚úÖ Configuration notifications termin√©e');
    return token;
    
  } catch (error) {
    console.error('‚ùå Erreur configuration notifications:', error);
    // ‚úÖ Ne pas faire crash l'app, juste log l'erreur
    return null;
  }
};

export const sendLocalNotification = async (title, body, data = {}) => {
  try {
    await Notifications.scheduleNotificationAsync({
      content: {
        title,
        body,
        data,
        sound: 'default',
      },
      trigger: null, // Imm√©diatement
    });
    console.log('‚úÖ Notification locale envoy√©e:', title);
  } catch (error) {
    console.error('‚ùå Erreur notification locale:', error);
  }
};